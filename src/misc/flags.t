import LoadShareLib: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import fileargs: (List (List Char)) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CSymbols: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Linux: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Solaris: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import SynExpand: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ShowTopTypes: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NumOverload: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FastTagOptim: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CaseTagOptim: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Globalize: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FarJump: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PreTupleSel: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Optlevel: Int {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import InlineFun: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import InlineCallMet: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ConstReturnCaf: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ConstCaf: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FastGCCheck: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FlatSuper: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import EtaExpand: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Optimize: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import UseForceArity: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import DoForceArity: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import UseSpecFunc: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import UseSpecInst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FloatInstr: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Trace: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import GenStabs: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import TestN: Int {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Test: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import X4: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import X3: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import X2: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import X1: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrTransformed: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrOutBwm: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGSpill: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrG2Op: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGJoin: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGTemp: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGSave: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGDup: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGContents: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGFlow: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGLive: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGAny: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrPredef: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrCurry: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrAddrestr: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrMtrans: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrSize: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrMcode: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGcode: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGcodeUnopt: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrAddarity: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrBconv: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrLambdalift: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrAddclose: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrStrict: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrOutFlic: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrSimpl: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrEqtrans: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrApconv: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrType: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrEcnv: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrClasstrans: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRemzf: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGenderiv: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRemLazy: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRemClass: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRemSign: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrAddfrom: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRemdeep: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRemmatch: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrConstr: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrRename: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrInput: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrStrictinfo: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrUnbox: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGBblock: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrSpillMsg: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrNoGcheck: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrGRCG: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PatVarError: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ShowsType: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import MonadCompr: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import EvalInst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import InstWithCT: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PIC: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CAFCall: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NPlusK: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CCall: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import H1_3: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import StackStubbing: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import WarnOverload: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import AutoSpecialize: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import MakeSelectors: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import MultiParam: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Ordering: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Record: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import QualifiedNames: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import RelaxEval: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import BadEvalInst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import EvalClass: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NewType: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import HigherKind: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import LocalInst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PowerPC: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Power: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Specialize: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import RecBlock: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ExistEscapeCheck: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import OverloadRestr: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import LocalQuant: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PatBindUpdate: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FastConst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import UseRestr: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import I586: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import I486: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Sparc8: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import forceprefix: (Option String) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Prelude: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ProfileHeap: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Interactive: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import LinkWord: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Strcmp: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import GenRead: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CheckUnusedVar: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ConcType: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrSubEarley: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrAppEarley: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrSubst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrCunrec: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrErrmap: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NewCall: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import GenCmp: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import AnnotId: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import UsageAnal: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ExportInline: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import DoInline: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import RegEntry: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FailStrict: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import StrictCall: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import BwmCon: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Relax: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import AutoDerive: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Pedantic: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import RevVis: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ExportCheck: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import AllowRedef: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import BothTypes: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Derived: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoPrelude: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import FlatNames: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import PrOrignames: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import TopShow: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoToprec: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CopyIndir: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import TermCall: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Unbox: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CopyRet: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import DoExtra: Int {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoElimdup: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import MemCheckStat: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ZapRedex: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Curry: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import TestEval: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoAsimpl: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import SparkKind: Char {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoChkInd: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import CaseOpt: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoNoeval: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoGOpt: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoBConv: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoStrictAnal: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoSimpl: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import TypeCheck: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoMOpt: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import InFlic: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Statistics: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoZeroFill: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoEvalupdunw: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Type: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoUnrec: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Code: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import realname: String {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import basename: (OK (List Char) (List Char)) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Verbose: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import nuflag: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Stingy: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoSubst: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Profile: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import NoVector: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Locking: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Parallel: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import EvalOpt: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Indir: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Fullname: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import ImpDebug: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Gflag: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Semistrict: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Strict: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import IdDebug: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import Debug: Bool {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
