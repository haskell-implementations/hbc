import qfixcontext: (String->((List Assert)->(List Assert))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import qfixid: (String->(Id->Id)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import qhprttype: (String->(Ttype->(List Char))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import setpref: ((List *a)->((List *a)->(List *a))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import specname: ((List Char)->(Ttype->(List Char))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import extractpragmas: (Binding->(Binding # (List (Id # (List Pragma))))) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import hasext: ((List Atype)->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import mkcompprel: ((List Char)->(List Char)) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,F" ST #};
import mkcompound: ((List (List Char))->(List Char)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import defstr: (Id->(Id->(List Char))) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,F" ST #};
import badidq: (Id->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import badid: (Id->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import cliof: (IDecl->(List (#3 Id Id Ttype))) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import buildinstid: ((Id->Origname)->(Int->(IDecl->(IDecl->(Bool->(Bool->((Id->(Int->Finfo))->(Id # Int)))))))) {# ARITY _ = 7 #}{# STRICTNESS _ = "2,F" ST #};
import mkffv: (Id->((List Fixid)->((List Id)->(Id->Origname)))) {# ARITY _ = 4 #}{# STRICTNESS _ = "0,F" ST #};
import mkff: (Visibility->(Id->((List Fixid)->(Id->Origname)))) {# ARITY _ = 4 #}{# STRICTNESS _ = "1,F" ST #};
import hrenexplist: ((List Expid)->(Renv->((List (List Char)) # (List Expid)))) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,T" ST #};
import isclass: (Impid->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import isval: (Impid->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import isctype: (Impid->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import istypeish: (Impid->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import isimpimport: (Impid->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import impid: (Impid->Id) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import isexpid: (Expid->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import fixtype: (String->(Ttype->Ttype)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import iscap: (Id->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import flatsyns: ((List Binding)->(List (Id # Ttype))) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import listify: (Binding->(List Binding)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import renexplist: ((List String)->(Renv->((List (List Char)) # (List Expid)))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import getimpid: (Impid->Id) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import findid: ((List Char)->(Renv->((Id->Texpr)->Texpr))) {# ARITY _ = 3 #}{# STRICTNESS _ = "T,F" ST #};
import etag: ((Id->Origname)->((List Id)->(Int->(Idinfo->Renv)))) {# ARITY _ = 4 #}{# STRICTNESS _ = "T,F" ST #};
import getcs: (Binding->(List Id)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import addc: ((List *a)->((*a->Bool)->(*a->Bool))) {# ARITY _ = 3 #}{# STRICTNESS _ = "0,F" ST #};
import ismulti: ((Id->Bool)->(Texpr->Bool)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import isconstri: (Renv->(Id->Bool)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import newidenti: (Id->(Int->Texpr)) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,T" ST #};
import mid: (String->((Int # Idinfo)->(Origname->Id))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import sdef: (Id->(Texpr->Binding)) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,T" ST #};
