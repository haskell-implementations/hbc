import resolvtyvars: ((List Ttype)->((List Assert)->((List Assert)->Subst))) {# ARITY _ = 3 #}{# STRICTNESS _ = "2,F" ST #};
import xrebuild: ((Int->*a)->((Id->*b)->((*b->((List *a)->*a))->((List (*b # Assert))->((Id # Ttype)->*a))))) {# ARITY _ = 5 #}{# STRICTNESS _ = "4,F" ST #};
import handleD: ((List (Expr # Assert))->((List Assert)->((Id # (Id # Ttype))->(OK (Id # (Id # Ttype)) (Id # Expr))))) {# ARITY _ = 3 #}{# STRICTNESS _ = "2,F" ST #};
import substcon: ((List (TyVar # Ttype))->((List Assert)->(List (Id # Ttype)))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import himplies: ((List Assert)->((Id # Ttype)->Bool)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import reorder: (Subst->(Ttype->Subst)) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import flatcollaps: ((List (Id # Ttype))->(OK (List Char) (List Assert))) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import buildid: (Assert->(Int->Id)) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import resolvedefs: (Subst->((List (*a # (Id # Ttype)))->((List Ttype)->(Prefix->((List TyVar)->Subst))))) {# ARITY _ = 5 #}{# STRICTNESS _ = "1,F" ST #};
import newd: ((Idtab Expr)->(Subst->((List Assert)->((List Id)->((Id # Expr)->(Ttype->((List (Id # (Id # Ttype)))->(Bool->(*a->((#4 (Id # Expr) (List (Id # (Id # Ttype))) Ttype (List (Id # Expr))) # *a)))))))))) {# ARITY _ = 9 #}{# STRICTNESS _ = "4&7,F" ST #};
import findinst: (Ttype->(Id->(Id # IDecl))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import matcht: (Ttype->(Ttype->(Option (List (TyVar # Ttype))))) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,F" ST #};
import matchs: ((List Ttype)->((List Ttype)->(List (TyVar # Ttype)))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import findit: (Id->(Ttype->((List (Id # IDecl))->(List (Id # IDecl))))) {# ARITY _ = 3 #}{# STRICTNESS _ = "1,F" ST #};
import subsume: ((List Assert)->(List Assert)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import caply: (Expr->((List Expr)->Expr)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import issuper: (Id->(Id->Bool)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import combdicts: ((List (List *a))->(List *a)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import combdict: ((List *a)->((List *a)->(List *a))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import combcon: ((List Assert)->((List Assert)->(List Assert))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0&1,F" ST #};
