import usekall: (Subst->Subst) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import lTRtype: ((List (TyVar # Ttype))->(Ttype->Ttype)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import isskolemtype: (Id->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import chkskolem: ((List Int)->((List (*a # Ttype))->(Ttype->(Subst->Bool)))) {# ARITY _ = 4 #}{# STRICTNESS _ = "3,F" ST #};
import skolemtype: (Int->((List Ttype)->((List (Assert # Id))->Ttype))) {# ARITY _ = 3 #}{# STRICTNESS _ = "T,F" ST #};
import nprttype: (Ttype->(List Char)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import normtypes: ((List Ttype)->(List Ttype)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import prunecontext: ((List TyVar)->(Subst->Subst)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import extractcon: ((List TyVar)->(Subst->(List Assert))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import TRdict: (Subst->((List (*a # (*b # Ttype)))->(List (*a # (*b # Ttype))))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import addconTR: ((List Assert)->(Subst->Subst)) {# ARITY _ = 2 #}{# STRICTNESS _ = "0&1,F" ST #};
import chkgen: ((List TyVar)->((List TyVar)->(Subst->(Ttype->(Ttype->((List TyVar)->Subst)))))) {# ARITY _ = 6 #}{# STRICTNESS _ = "2,F" ST #};
import prTR: (Subst->(List Char)) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import instTR: ((List TyVar)->(Int->((Ttype->Ttype) # Int))) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,T" ST #};
import TRtype: (Subst->(Ttype->Ttype)) {# ARITY _ = 2 #}{# STRICTNESS _ = "0&1,F" ST #};
import inst: (Ttype->((List TyVar)->(Int->(Ttype # Int)))) {# ARITY _ = 3 #}{# STRICTNESS _ = "1,1" ST #};
import pruneTR: (Int->(Subst->Subst)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,1" ST #};
import combTRs: ((List Subst)->Subst) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import combTR: (Subst->(Subst->Subst)) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import addTR: ((Int # Ttype)->(Subst->Subst)) {# ARITY _ = 2 #}{# STRICTNESS _ = "T,F" ST #};
import emptyTR: Subst {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
