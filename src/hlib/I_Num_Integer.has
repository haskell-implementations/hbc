module I_Num_Integer where
instance Num Integer where
	x + y = {-:"MM.Num.Integer.+":-} x y
	x - y = {-:"MM.Num.Integer.-":-} x y
	x * y = {-:"MM.Num.Integer.*":-} x y
	negate x = {-:"MM.Num.Integer.negate":-} x
	abs x = if {-:"MM.Ord.Integer.<":-} x 0 then {-:"MM.Num.Integer.negate":-} x else x
	signum x = if {-:"MM.Ord.Integer.<":-} x 0 then -1 else if {-:"MM.Ord.Integer.>":-} x 0 then 1 else 0
	fromInteger x = x
	fromInt x = {-:"PInt2Integer":-} x
	{-:"PfromInteger":-} x = case x{-# NOEVAL #-} of { (i,_,_) -> i{-# NOEVAL #-} }
