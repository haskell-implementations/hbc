module I_Fractional_Float where
instance Fractional Float where
	x / y	= {-:"MM.Fractional.Float./":-} x y
--SLOW
	fromRational x	=  x'
        	where x'    = f e
	              f e   = if e' == e then y else f e'
        	              where y      = encodeFloat (round (x * (1%b)^^e)) e
                	            (_,e') = decodeFloat y
	              (_,e) = decodeFloat (fromInteger (numerator x) `asTypeOf` x'
        	                                / fromInteger (denominator x))
	              b     = floatRadix x'
        {-:"PfromRational":-} x = case x{-# NOEVAL #-} of { (_,d) -> {-:"PDouble2Float":-} d }

