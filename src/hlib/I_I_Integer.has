module I_Integral_Integer where
#define QUOT {-:"MM.Integral.Integer.quot":-}
#define REM {-:"MM.Integral.Integer.rem":-}
instance Integral Integer where
	x `quot` y = QUOT x y
	x `rem`  y = REM  x y
	quotRem x y = {-:"MM.Integral.Integer.quotRem":-} x y
--        x `div` y = if x > 0 && y < 0 || x < 0 && y > 0 then QUOT x y - 1 else QUOT x y
--        x `mod` y = if x > 0 && y < 0 || x < 0 && y > 0 then REM  x y + y else REM  x y
{-
        x `div` y = if x > 0 && y < 0 then QUOT (x-y-1) y else if x < 0 && y > 0 then QUOT (x-y+1) y else QUOT x y
        x `mod` y = if x > 0 && y < 0 then REM  (x-y-1) y else if x < 0 && y > 0 then REM  (x-y+1) y else REM  x y
        divMod x y = (x `div` y, x `mod` y)
-}
	n `div` d           =  q  where (q,r) = divMod n d
	n `mod` d           =  r  where (q,r) = divMod n d
	divMod n d          =  if signum r == - signum d then (q-1, r+d) else qr
                               where qr@(q,r) = quotRem n d

	even x = {-:"MM.Eq.Integer.==":-} (REM x 2) 0
	odd x = {-:"MM.Eq.Integer./=":-} (REM x 2) 0
	toInteger x = x
	toInt x = {-:"PInteger2Int":-} x
