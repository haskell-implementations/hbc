import mreturn: (List Mcode) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import constrbv: (Gvalue->String) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import constrbc: (Gbasicconstr->String) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import hpmsize: (Int->Int) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import hpmoves: ((#3 Int Int Int)->(Addrmode->(List Mcode))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import hpwords: ((#3 Int Int Int)->(List Mcode)) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,F" ST #};
import tostack: (Int->((List Addrmode)->(List Mcode))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import valbv: (Gvalue->Int) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import strbv: (Gvalue->String) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import mindirtag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mpairtag: (Int->Addrmode) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import mniltag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mtagtag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mvektag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mcaptag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import maptag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mapgtag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mvapgtag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mvaptag: Addrmode {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import mgop: (Gbasicconstr->(Gbasicop->Operator)) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import isbinarithop: (Gbasicop->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import strop: (Gbasicop->String) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,0" ST #};
import strbc: (Gbasicconstr->String) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import indS: (Int->((List Addrmode)->Addrmode)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import prepWuse: (Int->((List Wuseinfo)->(List Wuseinfo))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import intoreg0: (Addrmode->((List Mcode)->(List Mcode))) {# ARITY _ = 2 #}{# STRICTNESS _ = "0,F" ST #};
import intoareg: (Addrmode->((List Addrmode)->((List Addrmode)->((List Mcode) # Int)))) {# ARITY _ = 3 #}{# STRICTNESS _ = "0,0" ST #};
import allWpush: (List Wuseinfo) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import allpopS: (List Addrmode) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import allpopV: (List Addrmode) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import newDF: (Addrmode->(Wuseinfo->((List Addrmode)->((List Mcode)->((List Mcode) # (List Addrmode)))))) {# ARITY _ = 4 #}{# STRICTNESS _ = "1,F" ST #};
import newSF: (Addrmode->(Wuseinfo->((List Addrmode)->((List Mcode)->((List Mcode) # (List Addrmode)))))) {# ARITY _ = 4 #}{# STRICTNESS _ = "1,F" ST #};
import newV: (Addrmode->(Wuseinfo->((List Addrmode)->((List Mcode)->((List Mcode) # (List Addrmode)))))) {# ARITY _ = 4 #}{# STRICTNESS _ = "1,F" ST #};
import newS: (Addrmode->(Wuseinfo->((List Addrmode)->((List Mcode)->((List Mcode) # (List Addrmode)))))) {# ARITY _ = 4 #}{# STRICTNESS _ = "1,F" ST #};
import newheapS: (Int->(Wuseinfo->((List Addrmode)->((List Mcode)->((List Mcode) # (List Addrmode)))))) {# ARITY _ = 4 #}{# STRICTNESS _ = "1,1" ST #};
import Ha: (Int->((List Addrmode)->(List Addrmode))) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,F" ST #};
import H: (Int->(Addrmode->Addrmode)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,1" ST #};
