import isrational: (Constr->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import mkrational: (String->Constr) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,T" ST #};
import isinteger: (Constr->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import isdfloat: (Constr->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import issfloat: (Constr->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import mkinteger: (String->Constr) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,T" ST #};
import mkdfloat: (String->Constr) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,T" ST #};
import mksfloat: (String->Constr) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,T" ST #};
import cexist: (Constr->(#3 Bool (List Int) (List Assert))) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import carity: (Constr->Int) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import constrtype: (Constr->ConstructorType) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import isstring: (Constr->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import mkstring: (String->Constr) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,T" ST #};
import nth_constr: (Int->(Tinfo->Constr)) {# ARITY _ = 2 #}{# STRICTNESS _ = "1,1" ST #};
import nconstrs: (Constr->Int) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import tctype: (Texpr->Ttype) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import cargs: (Constr->(List (Ttype # Bool))) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import cno: (Constr->Int) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import ctinfo: (Constr->Tinfo) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import ctype: (Constr->Ttype) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import cname: (Constr->String) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
