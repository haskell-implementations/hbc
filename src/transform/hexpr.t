import hit4: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hit3: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hinexp: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hizip4: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hizip3: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hizip: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higengt: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higenge: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higenle: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higenlt: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higenne: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higeneq: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiitodf: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidftoi: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidfnegate: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidfdiv: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidfmul: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidfsub: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidfadd: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hibrsha: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hibrsh: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiblsh: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hibcompl: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hibxor: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hibor: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiband: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidocmp: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import isidfail: (Id->Bool) {# ARITY _ = 1 #}{# STRICTNESS _ = "0,F" ST #};
import hituple: (Int->Id) {# ARITY _ = 1 #}{# STRICTNESS _ = "T,F" ST #};
import hi_undefined: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiundefined: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hilex: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hireadParen: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiconc: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcLT: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcGT: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcEQ: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiGT: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiLT: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiEQ: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hicompare: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hichr: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hifromEnum: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hitoEnum: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiIntegral: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiString: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiotherwise: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hinot: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiRational: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiNum: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import numClass: (List Id) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,T" ST #};
import stdClass: (List Id) {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiDFloat: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import himod: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidiv: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiseq: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hi_chr: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hi_ord: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hinegate: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hine: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import higt: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcunit: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hccons: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcnil: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiComplex: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiInteger: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiSFloat: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiBool: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiChar: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiInt: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiList: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import himul: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcpair: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hipair: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hirangeSize: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hifromRational: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hifromInteger: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hireads: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import himapFst: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hireadRec: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiUnit: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiIO: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiResponse: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiRequest: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiDialogue: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hinil: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hicons: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hifalse: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hitrue: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiPshowBin: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiPreadBin: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowBin: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hireadBin: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFTTU: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFTT: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFT: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFromThenTo: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFromTo: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFromThen: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hienumFrom: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowt: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hinever: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiPinRange: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiPindex: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiPrange: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiflip: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hidol: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hicomp: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowChar: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowParen: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowString: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowsType: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hireadsPrec: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hishowsPrec: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiinRange: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiindex: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hirange: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiCPointer: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiltint: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiord: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hieqint: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hifail: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hicno: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiARROW: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import himaxBound: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import himinBound: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiFunctor: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiEval: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiBounded: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiRead: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiShow: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiBinary: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiText: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiEnum: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiIx: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiOrd: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiEq: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hileint: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hior: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hile: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hilt: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hcfalse: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hctrue: Constr {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hieq: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hige: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hisub: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiadd: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
import hiand: Id {# ARITY _ = 0 #}{# STRICTNESS _ = "T,F" ST #};
