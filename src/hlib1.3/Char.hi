interface Char where {
{-# IMPORTING Char__readLitChar, Char__showLitChar, Array, _ByteVector, System, _LibIO_all #-}
isLatin1 :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
isAscii :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
isControl :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
isDigit :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
isAlpha :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
isAlphanum :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
isPrint :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
isSpace :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
isHexDigit :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
isOctDigit :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
isUpper :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
isLower :: Prelude.Char -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
toUpper :: Prelude.Char -> Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
toLower :: Prelude.Char -> Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
digitToInt :: Prelude.Char -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
intToDigit :: Prelude.Int -> Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ord :: Prelude.Char -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
chr :: Prelude.Int -> Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
Char__readLitChar.readLitChar :: Prelude.ReadS Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
Char__showLitChar.showLitChar :: Prelude.Char -> Prelude.ShowS   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
decodeUTF8 :: Prelude.String -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
encodeUTF8 :: Prelude.String -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
decodeUnicode :: Prelude.String -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
encodeUnicode :: Prelude.String -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
decodeEscape :: Prelude.String -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
encodeEscape :: Prelude.String -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-}
}
