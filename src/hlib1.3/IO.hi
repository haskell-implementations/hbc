interface IO where {
{-# IMPORTING StdIO, WriteTextIO, IOError, ReadTextIO, MonadicIO #-}
data _LibIO.IO a;
MonadicIO.catch :: (_LibIO.IO a) -> (_LibIO.IOError -> _LibIO.IO a) -> _LibIO.IO a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "0,0" ST #-};
MonadicIO.userError :: Prelude.String -> _LibIO.IOError   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,T" ST #-};
MonadicIO.bracket :: (_LibIO.IO a) -> (a -> _LibIO.IO b) -> (a -> _LibIO.IO c) -> _LibIO.IO c   {-# ARITY _ = 3 #-}{-# STRICTNESS _ = "0,0" ST #-};
MonadicIO.bracket_ :: (_LibIO.IO a) -> (a -> _LibIO.IO b) -> (_LibIO.IO c) -> _LibIO.IO c   {-# ARITY _ = 3 #-}{-# STRICTNESS _ = "0,0" ST #-};
MonadicIO.try :: (_LibIO.IO a) -> _LibIO.IO (Prelude.Either _LibIO.IOError a)   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
_LibIO__fail.fail :: _LibIO.IOError -> _LibIO.IO a   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,T" ST #-};
data _LibIO.Handle;
type StdIO.FilePath = Prelude.String;
data _LibIO.IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode;
data StdIO__data.BufferMode = NoBuffering | LineBuffering | BlockBuffering (Prelude.Maybe Prelude.Int);
data StdIO__data.HandlePosn;
data StdIO__data.SeekMode = AbsoluteSeek | RelativeSeek | SeekFromEnd;
StdIO__std.stdin :: _LibIO.Handle   {-# ARITY _ = 0 #-}{-# STRICTNESS _ = "T,T" ST #-};
StdIO__std.stdout :: _LibIO.Handle   {-# ARITY _ = 0 #-}{-# STRICTNESS _ = "T,T" ST #-};
StdIO__std.stderr :: _LibIO.Handle   {-# ARITY _ = 0 #-}{-# STRICTNESS _ = "T,T" ST #-};
StdIO__openFile.openFile :: StdIO.FilePath -> _LibIO.IOMode -> _LibIO.IO _LibIO.Handle   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,T" ST #-};
StdIO__openFile.openBinaryFile :: StdIO.FilePath -> _LibIO.IOMode -> _LibIO.IO _LibIO.Handle   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,T" ST #-};
StdIO__hClose.hClose :: _LibIO.Handle -> _LibIO.IO ()   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hFileSize :: _LibIO.Handle -> _LibIO.IO Prelude.Integer   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO__hIsEOF.hIsEOF :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hSetBuffering :: _LibIO.Handle -> StdIO__data.BufferMode -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hFlush :: _LibIO.Handle -> _LibIO.IO ()   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hGetPosn :: _LibIO.Handle -> _LibIO.IO StdIO__data.HandlePosn   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hSetPosn :: _LibIO.Handle -> StdIO__data.HandlePosn -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "0&1,0&1" ST #-};
StdIO.hSeek :: _LibIO.Handle -> StdIO__data.SeekMode -> Prelude.Integer -> _LibIO.IO ()   {-# ARITY _ = 3 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hIsOpen :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hIsClosed :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hIsReadable :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hIsWritable :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
StdIO.hIsSeekable :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
ReadTextIO.hReady :: _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
ReadTextIO.hWaitForInput :: Prelude.Int -> _LibIO.Handle -> _LibIO.IO Prelude.Bool   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,1" ST #-};
ReadTextIO.hGetChar :: _LibIO.Handle -> _LibIO.IO Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
ReadTextIO.getChar :: _LibIO.IO Prelude.Char   {-# ARITY _ = 0 #-}{-# STRICTNESS _ = "T,F" ST #-};
ReadTextIO.hLookAhead :: _LibIO.Handle -> _LibIO.IO Prelude.Char   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
ReadTextIO.hGetLine :: _LibIO.Handle -> _LibIO.IO Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ReadTextIO.hGetContents :: _LibIO.Handle -> _LibIO.IO Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
ReadTextIO.readFile :: [Prelude.Char] -> _LibIO.IO [Prelude.Char]   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-};
WriteTextIO.hPutChar :: _LibIO.Handle -> Prelude.Char -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "0,0" ST #-};
WriteTextIO.putChar :: Prelude.Char -> _LibIO.IO ()   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-};
WriteTextIO.hPutStr :: _LibIO.Handle -> Prelude.String -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "0,0" ST #-};
WriteTextIO.hPrint :: (Prelude.Show a) => _LibIO.Handle -> a -> _LibIO.IO ()   {-# ARITY _ = 3 #-}{-# STRICTNESS _ = "1,1" ST #-};
WriteTextIO.putStr :: [Prelude.Char] -> _LibIO.IO ()   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-};
WriteTextIO.putStrLn :: Prelude.String -> _LibIO.IO ()   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-};
WriteTextIO.print :: (Prelude.Show a) => a -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,F" ST #-};
WriteTextIO.writeFile :: [Prelude.Char] -> [Prelude.Char] -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,F" ST #-};
WriteTextIO.appendFile :: [Prelude.Char] -> [Prelude.Char] -> _LibIO.IO ()   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,F" ST #-};
data _LibIO.IOError;
_LibIOErrno.isAlreadyExistsError :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
_LibIOErrno.isAlreadyInUseError :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
_LibIOErrno.isFullError :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
IOError.isEOFError :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
_LibIOErrno.isIllegalOperation :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
_LibIOErrno.isPermissionError :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
_LibIOErrno.isDoesNotExistError :: _LibIO.IOError -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
IOError.isUserError :: _LibIO.IOError -> Prelude.Maybe Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
IOError.ioeGetHandle :: _LibIO.IOError -> Prelude.Maybe _LibIO.Handle   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
IOError.ioeGetFileName :: _LibIO.IOError -> Prelude.Maybe StdIO.FilePath   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
IOError.ioeGetErrorString :: _LibIO.IOError -> Prelude.Maybe Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
interact :: (Prelude.String -> Prelude.String) -> _LibIO.IO ()   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-};
instance Ix.Ix StdIO__data.SeekMode {-# DERIVED #-};
instance Ix.Ix _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Bounded StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Bounded _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Enum StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Enum _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Eq StdIO__data.BufferMode {-# DERIVED #-};
instance Prelude.Eq StdIO__data.HandlePosn {-# DERIVED #-};
instance Prelude.Eq StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Eq _LibIO.Handle {-# STRICTNESS (Prelude.==) = "T,F" ST #-} {-# STRICTNESS (Prelude./=) = "T,F" ST #-};
instance Prelude.Eq _LibIO.IOError {-# DERIVED #-};
instance Prelude.Eq _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Eval StdIO__data.BufferMode {-# DERIVED #-};
instance Prelude.Eval StdIO__data.HandlePosn {-# DERIVED #-};
instance Prelude.Eval StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Eval _LibIO.Handle {-# DERIVED #-};
instance Prelude.Eval (_LibIO.IO a) {-# DERIVED #-};
instance Prelude.Eval _LibIO.IOError {-# DERIVED #-};
instance Prelude.Eval _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Functor _LibIO.IO {-# STRICTNESS Prelude.map = "T,F" ST #-};
instance Prelude.Monad _LibIO.IO {-# STRICTNESS (>>=) = "0,0" ST #-} {-# STRICTNESS (>>) = "0&1,0&1" ST #-} {-# STRICTNESS return = "T,T" ST #-};
instance Prelude.Ord StdIO__data.BufferMode {-# DERIVED #-};
instance Prelude.Ord StdIO__data.HandlePosn {-# DERIVED #-};
instance Prelude.Ord StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Ord _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Read StdIO__data.BufferMode {-# DERIVED #-};
instance Prelude.Read StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Read _LibIO.IOMode {-# DERIVED #-};
instance Prelude.Show StdIO__data.BufferMode {-# DERIVED #-};
instance Prelude.Show StdIO__data.HandlePosn {-# STRICTNESS Prelude.showsPrec = "T,F" ST #-} {-# STRICTNESS Prelude.showList = "T,F" ST #-} {-# STRICTNESS Prelude.showsType = "T,F" ST #-};
instance Prelude.Show StdIO__data.SeekMode {-# DERIVED #-};
instance Prelude.Show _LibIO.Handle {-# STRICTNESS Prelude.showsPrec = "T,F" ST #-} {-# STRICTNESS Prelude.showList = "T,F" ST #-} {-# STRICTNESS Prelude.showsType = "T,F" ST #-};
instance (Prelude.Show a) => Prelude.Show (_LibIO.IO a) {-# STRICTNESS Prelude.showsPrec = "T,F" ST #-} {-# STRICTNESS Prelude.showList = "T,F" ST #-} {-# STRICTNESS Prelude.showsType = "T,F" ST #-};
instance Prelude.Show _LibIO.IOError {-# STRICTNESS Prelude.showsPrec = "T,F" ST #-} {-# STRICTNESS Prelude.showList = "T,F" ST #-} {-# STRICTNESS Prelude.showsType = "T,F" ST #-};
instance Prelude.Show _LibIO.IOMode {-# DERIVED #-}
}
