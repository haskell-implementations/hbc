module PreludeX where
instance Num Int where
	x + y = {-:"MM`Prelude.Num`Prelude.Int`+":-} x y
	x - y = {-:"MM`Prelude.Num`Prelude.Int`-":-} x y
	x * y = {-:"MM`Prelude.Num`Prelude.Int`*":-} x y
	negate x = {-:"MM`Prelude.Num`Prelude.Int`negate":-} x
	abs x = if {-:"MM`Prelude.Ord`Prelude.Int`<":-} x {-:#0:-} then {-:"MM`Prelude.Num`Prelude.Int`negate":-} x else x
	signum x = if {-:"MM`Prelude.Ord`Prelude.Int`<":-} x {-:#0:-} then {-:#-1:-} else if {-:"MM`Prelude.Ord`Prelude.Int`>":-} x {-:#0:-} then {-:#1:-} else {-:#0:-}
	fromInteger x = {-:"MM`Prelude.Num`Prelude.Int`fromInteger":-} x
	fromInt x = x
	{-:"PfromInteger":-} x = case x{-# NOEVAL #-} of { (_,i,_) -> i{-# NOEVAL #-} }
