interface Time where {
{-# IMPORTING _LibDialogue, Array, _LibIO__process, Char, Locale #-}
data ClockTime;
_mkClockTime :: Prelude.Double -> ClockTime   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,T" ST #-};
data Month = January | February | March | April | May | June | July | August | September | October | November | December;
data Day = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday;
data CalendarTime = CalendarTime { ctYear :: Prelude.Int, ctMon :: Month, ctDay :: Prelude.Int, ctHour :: Prelude.Int, ctMin :: Prelude.Int, ctSec :: Prelude.Int, ctPicosec :: Prelude.Integer, ctWDay :: Day, ctYDay :: Prelude.Int, ctTZName :: Prelude.String, ctTZ :: Prelude.Int, ctIsDST :: Prelude.Bool };
ctYear :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctMon :: CalendarTime -> Month   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctDay :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctHour :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctMin :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctSec :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctPicosec :: CalendarTime -> Prelude.Integer   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctWDay :: CalendarTime -> Day   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctYDay :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctTZName :: CalendarTime -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctTZ :: CalendarTime -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
ctIsDST :: CalendarTime -> Prelude.Bool   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
data TimeDiff = TimeDiff { tdYear :: Prelude.Int, tdMon :: Prelude.Int, tdDay :: Prelude.Int, tdHour :: Prelude.Int, tdMin :: Prelude.Int, tdSec :: Prelude.Int, tdPicosec :: Prelude.Integer };
tdYear :: TimeDiff -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
tdMon :: TimeDiff -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
tdDay :: TimeDiff -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
tdHour :: TimeDiff -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
tdMin :: TimeDiff -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
tdSec :: TimeDiff -> Prelude.Int   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
tdPicosec :: TimeDiff -> Prelude.Integer   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
timeDiffToDouble :: TimeDiff -> Prelude.Double   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
getClockTime :: _LibIO.IO ClockTime   {-# ARITY _ = 0 #-}{-# STRICTNESS _ = "T,T" ST #-};
addToClockTime :: TimeDiff -> ClockTime -> ClockTime   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,1" ST #-};
diffClockTime :: ClockTime -> ClockTime -> TimeDiff   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "0&1,F" ST #-};
toCalendarTime :: ClockTime -> _LibIO.IO CalendarTime   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
toUTCTime :: ClockTime -> CalendarTime   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
toClockTime :: CalendarTime -> ClockTime   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-};
formatCalendarTime :: Locale.TimeLocale -> Prelude.String -> CalendarTime -> Prelude.String   {-# ARITY _ = 3 #-}{-# STRICTNESS _ = "1&2,F" ST #-};
calendarTimeToString :: CalendarTime -> Prelude.String   {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-};
getTimeDouble :: _LibIO.IO Prelude.Double   {-# ARITY _ = 0 #-}{-# STRICTNESS _ = "T,F" ST #-};
instance Ix.Ix Month {-# DERIVED #-};
instance Ix.Ix Day {-# DERIVED #-};
instance Prelude.Bounded Month {-# DERIVED #-};
instance Prelude.Bounded Day {-# DERIVED #-};
instance Prelude.Enum Month {-# DERIVED #-};
instance Prelude.Enum Day {-# DERIVED #-};
instance Prelude.Eq ClockTime {-# DERIVED #-};
instance Prelude.Eq Month {-# DERIVED #-};
instance Prelude.Eq Day {-# DERIVED #-};
instance Prelude.Eq CalendarTime {-# DERIVED #-};
instance Prelude.Eq TimeDiff {-# DERIVED #-};
instance Prelude.Eval ClockTime {-# DERIVED #-};
instance Prelude.Eval Month {-# DERIVED #-};
instance Prelude.Eval Day {-# DERIVED #-};
instance Prelude.Eval CalendarTime {-# DERIVED #-};
instance Prelude.Eval TimeDiff {-# DERIVED #-};
instance Prelude.Ord ClockTime {-# DERIVED #-};
instance Prelude.Ord Month {-# DERIVED #-};
instance Prelude.Ord Day {-# DERIVED #-};
instance Prelude.Ord CalendarTime {-# DERIVED #-};
instance Prelude.Ord TimeDiff {-# DERIVED #-};
instance Prelude.Read Month {-# DERIVED #-};
instance Prelude.Read Day {-# DERIVED #-};
instance Prelude.Read CalendarTime {-# DERIVED #-};
instance Prelude.Read TimeDiff {-# DERIVED #-};
instance Prelude.Show ClockTime {-# STRICTNESS showsPrec = "T,F" ST #-} {-# STRICTNESS showList = "T,F" ST #-} {-# STRICTNESS showsType = "T,F" ST #-};
instance Prelude.Show Month {-# DERIVED #-};
instance Prelude.Show Day {-# DERIVED #-};
instance Prelude.Show CalendarTime {-# DERIVED #-};
instance Prelude.Show TimeDiff {-# DERIVED #-}
}
