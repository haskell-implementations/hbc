interface Complex where {
infix  6 :+;
cis :: (Prelude.RealFloat a) => a -> Complex a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,F" ST #-}{-# SPECIALIZE cis :: Prelude.Float -> Complex Prelude.Float {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-}, Prelude.Double -> Complex Prelude.Double {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,F" ST #-} #-};
conjugate :: (Prelude.RealFloat a) => (Complex a) -> Complex a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,F" ST #-}{-# SPECIALIZE conjugate :: (Complex Prelude.Float) -> Complex Prelude.Float {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-}, (Complex Prelude.Double) -> Complex Prelude.Double {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,0" ST #-} #-};
imagPart :: (Prelude.RealFloat a) => (Complex a) -> a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,1" ST #-};
magnitude :: (Prelude.RealFloat a) => (Complex a) -> a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,F" ST #-}{-# SPECIALIZE magnitude :: (Complex Prelude.Float) -> Prelude.Float {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-}, (Complex Prelude.Double) -> Prelude.Double {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-} #-};
mkPolar :: (Prelude.RealFloat a) => a -> a -> Complex a   {-# ARITY _ = 3 #-}{-# STRICTNESS _ = "T,F" ST #-}{-# SPECIALIZE mkPolar :: Prelude.Float -> Prelude.Float -> Complex Prelude.Float {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,F" ST #-}, Prelude.Double -> Prelude.Double -> Complex Prelude.Double {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,F" ST #-} #-};
phase :: (Prelude.RealFloat a) => (Complex a) -> a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,F" ST #-}{-# SPECIALIZE phase :: (Complex Prelude.Float) -> Prelude.Float {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-}, (Complex Prelude.Double) -> Prelude.Double {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "0,F" ST #-} #-};
polar :: (Prelude.RealFloat a) => (Complex a) -> (a, a)   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "T,T" ST #-}{-# SPECIALIZE polar :: (Complex Prelude.Float) -> (Prelude.Float, Prelude.Float) {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,T" ST #-}, (Complex Prelude.Double) -> (Prelude.Double, Prelude.Double) {-# ARITY _ = 1 #-}{-# STRICTNESS _ = "T,T" ST #-} #-};
realPart :: (Prelude.RealFloat a) => (Complex a) -> a   {-# ARITY _ = 2 #-}{-# STRICTNESS _ = "1,1" ST #-};
data (Prelude.RealFloat a) => Complex a = (:+) !a !a;
instance (Prelude.RealFloat a) => Prelude.Eq (Complex a) {-# STRICTNESS (==) = "1&2,F" ST #-} {-# STRICTNESS (/=) = "1&2,F" ST #-};
instance Prelude.Eq (Complex Prelude.Double) {-# STRICTNESS (==) = "0&1,0&1" ST #-} {-# STRICTNESS (/=) = "0&1,0&1" ST #-};
instance Prelude.Eq (Complex Prelude.Float) {-# STRICTNESS (==) = "0&1,0&1" ST #-} {-# STRICTNESS (/=) = "0&1,0&1" ST #-};
instance (Prelude.RealFloat a) => Prelude.Eval (Complex a) {-# DERIVED #-};
instance (Prelude.RealFloat a) => Prelude.Floating (Complex a) {-# STRICTNESS pi = "T,F" ST #-} {-# STRICTNESS exp = "1,F" ST #-} {-# STRICTNESS log = "T,F" ST #-} {-# STRICTNESS sqrt = "1,F" ST #-} {-# STRICTNESS (**) = "T,F" ST #-} {-# STRICTNESS logBase = "T,F" ST #-} {-# STRICTNESS sin = "1,F" ST #-} {-# STRICTNESS cos = "1,F" ST #-} {-# STRICTNESS tan = "1,F" ST #-} {-# STRICTNESS asin = "1,F" ST #-} {-# STRICTNESS acos = "1,F" ST #-} {-# STRICTNESS atan = "1,F" ST #-} {-# STRICTNESS sinh = "1,F" ST #-} {-# STRICTNESS cosh = "1,F" ST #-} {-# STRICTNESS tanh = "1,F" ST #-} {-# STRICTNESS asinh = "T,F" ST #-} {-# STRICTNESS acosh = "T,F" ST #-} {-# STRICTNESS atanh = "T,F" ST #-};
instance Prelude.Floating (Complex Prelude.Double) {-# STRICTNESS pi = "T,T" ST #-} {-# STRICTNESS exp = "0,F" ST #-} {-# STRICTNESS log = "T,F" ST #-} {-# STRICTNESS sqrt = "0,F" ST #-} {-# STRICTNESS (**) = "T,F" ST #-} {-# STRICTNESS logBase = "T,F" ST #-} {-# STRICTNESS sin = "0,F" ST #-} {-# STRICTNESS cos = "0,F" ST #-} {-# STRICTNESS tan = "0,F" ST #-} {-# STRICTNESS asin = "0,F" ST #-} {-# STRICTNESS acos = "0,F" ST #-} {-# STRICTNESS atan = "0,F" ST #-} {-# STRICTNESS sinh = "0,F" ST #-} {-# STRICTNESS cosh = "0,F" ST #-} {-# STRICTNESS tanh = "0,F" ST #-} {-# STRICTNESS asinh = "T,F" ST #-} {-# STRICTNESS acosh = "T,F" ST #-} {-# STRICTNESS atanh = "T,F" ST #-};
instance Prelude.Floating (Complex Prelude.Float) {-# STRICTNESS pi = "T,T" ST #-} {-# STRICTNESS exp = "0,F" ST #-} {-# STRICTNESS log = "T,F" ST #-} {-# STRICTNESS sqrt = "0,F" ST #-} {-# STRICTNESS (**) = "T,F" ST #-} {-# STRICTNESS logBase = "T,F" ST #-} {-# STRICTNESS sin = "0,F" ST #-} {-# STRICTNESS cos = "0,F" ST #-} {-# STRICTNESS tan = "0,F" ST #-} {-# STRICTNESS asin = "0,F" ST #-} {-# STRICTNESS acos = "0,F" ST #-} {-# STRICTNESS atan = "0,F" ST #-} {-# STRICTNESS sinh = "0,F" ST #-} {-# STRICTNESS cosh = "0,F" ST #-} {-# STRICTNESS tanh = "0,F" ST #-} {-# STRICTNESS asinh = "T,F" ST #-} {-# STRICTNESS acosh = "T,F" ST #-} {-# STRICTNESS atanh = "T,F" ST #-};
instance (Prelude.RealFloat a) => Prelude.Fractional (Complex a) {-# STRICTNESS (/) = "1&2,F" ST #-} {-# STRICTNESS recip = "T,F" ST #-} {-# STRICTNESS fromRational = "T,F" ST #-} {-# STRICTNESS {-:"PfromRational":-} = "T,F" ST #-};
instance Prelude.Fractional (Complex Prelude.Double) {-# STRICTNESS (/) = "0&1,F" ST #-} {-# STRICTNESS recip = "T,F" ST #-} {-# STRICTNESS fromRational = "T,F" ST #-} {-# STRICTNESS {-:"PfromRational":-} = "T,F" ST #-};
instance Prelude.Fractional (Complex Prelude.Float) {-# STRICTNESS (/) = "0&1,F" ST #-} {-# STRICTNESS recip = "T,F" ST #-} {-# STRICTNESS fromRational = "T,F" ST #-} {-# STRICTNESS {-:"PfromRational":-} = "T,F" ST #-};
instance (Prelude.RealFloat a) => Prelude.Num (Complex a) {-# STRICTNESS (+) = "1&2,F" ST #-} {-# STRICTNESS (-) = "1&2,F" ST #-} {-# STRICTNESS (*) = "1&2,F" ST #-} {-# STRICTNESS negate = "1,F" ST #-} {-# STRICTNESS abs = "T,F" ST #-} {-# STRICTNESS signum = "1,F" ST #-} {-# STRICTNESS fromInteger = "T,F" ST #-} {-# STRICTNESS fromInt = "T,F" ST #-} {-# STRICTNESS {-:"PfromInteger":-} = "T,F" ST #-};
instance Prelude.Num (Complex Prelude.Double) {-# STRICTNESS (+) = "0&1,0&1" ST #-} {-# STRICTNESS (-) = "0&1,0&1" ST #-} {-# STRICTNESS (*) = "0&1,0&1" ST #-} {-# STRICTNESS negate = "0,0" ST #-} {-# STRICTNESS abs = "T,F" ST #-} {-# STRICTNESS signum = "0,F" ST #-} {-# STRICTNESS fromInteger = "T,F" ST #-} {-# STRICTNESS fromInt = "T,F" ST #-} {-# STRICTNESS {-:"PfromInteger":-} = "T,F" ST #-};
instance Prelude.Num (Complex Prelude.Float) {-# STRICTNESS (+) = "0&1,0&1" ST #-} {-# STRICTNESS (-) = "0&1,0&1" ST #-} {-# STRICTNESS (*) = "0&1,0&1" ST #-} {-# STRICTNESS negate = "0,0" ST #-} {-# STRICTNESS abs = "T,F" ST #-} {-# STRICTNESS signum = "0,F" ST #-} {-# STRICTNESS fromInteger = "T,F" ST #-} {-# STRICTNESS fromInt = "T,F" ST #-} {-# STRICTNESS {-:"PfromInteger":-} = "T,F" ST #-};
instance (Prelude.Read a, Prelude.RealFloat a) => Prelude.Read (Complex a) {-# DERIVED #-};
instance (Prelude.RealFloat a) => Prelude.Show (Complex a) {-# DERIVED #-}
}
